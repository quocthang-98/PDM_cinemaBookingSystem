package cinemabookingsystem2;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.event.*;
import javax.swing.DefaultListSelectionModel;

public class CJFrame extends javax.swing.JFrame {
    
    String[] movieList = new String[10];
    
    public CJFrame() {
        initComponents();
        this.movieListReset();
        btnRun.setFocusable(false);
        btnRun.setBackground(Color.white);
        
        cbbFilter.setBackground(Color.white);
        
        btnNext.setBackground(Color.decode("#ff5555")); 
        btnNext.setForeground(Color.white);  


        btnNext.setFocusable(false);
        
        jList1.setFocusable(false);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtQuery = new javax.swing.JTextField();
        btnRun = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        cbbFilter = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Browse Movies");
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("UTM Avo", 0, 14)); // NOI18N
        jLabel1.setText("What movie are you looking for?");

        txtQuery.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txtQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQueryActionPerformed(evt);
            }
        });

        btnRun.setFont(new java.awt.Font("UTM Avo", 0, 12)); // NOI18N
        btnRun.setText("Search");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = movieList;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        cbbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Action", "Comedy", "Documentary", "Drama", "Sci-fi", "Thriller" }));
        cbbFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbFilterActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(110, 110, 110));
        jLabel2.setText("Search by Genre");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(110, 110, 110));
        jLabel3.setText("or by Name");

        btnNext.setFont(new java.awt.Font("UTM Avo", 0, 12)); // NOI18N
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbbFilter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRun, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                    .addComponent(btnNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(69, 69, 69))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRun)
                            .addComponent(cbbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNext, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        
        if (txtQuery.getText().length() == 0) {
            return;
        }
        
        this.movieListReset();
        String connectionUrl = "jdbc:sqlserver://localhost:1433;DatabaseName=CinemaBookingSystem;user=sa;password=090803;encrypt=false";

        try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement();) {
            
            String SQL = txtQuery.getText();
            String searchQuery = "Select * From Movie Where movieName LIKE '%" + SQL + "%'";
            ResultSet rs = stmt.executeQuery(searchQuery);

            // Iterate through the data in the result set and display it.
            // process query results
            ResultSetMetaData metaData = rs.getMetaData();
            int numberOfColumns = metaData.getColumnCount();
            //  Metadata
            
            int movieCount = 0;
            
            while (rs.next()) {
                for (int i = 1; i <= numberOfColumns; i++) {
                    if ((i == 2) || (i == 4) || (i == 5)) {
                        movieList[movieCount] = movieList[movieCount] + rs.getObject(i) + "  //  ";
                        if (i == 5) {
                            movieCount++;
                        }
                    }
                }              
            }
            
            jList1 = new javax.swing.JList<>();

            jList1.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = movieList;
                public int getSize() { return strings.length; }
                public String getElementAt(int i) { return strings[i]; }
            });

            jScrollPane1.setViewportView(jList1);

        } // Handle any errors that may have occurred.
        catch (SQLException e) {            
        }
    }//GEN-LAST:event_btnRunActionPerformed

    private void cbbFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbFilterActionPerformed
        // TODO add your handling code here:
        
        if (evt.getSource() == cbbFilter) {
            this.movieListReset();
            String connectionUrl = "jdbc:sqlserver://localhost:1433;DatabaseName=CinemaBookingSystem;user=sa;password=090803;encrypt=false";
            
            try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement();) {
                ResultSet rs = stmt.executeQuery("  " +
                                            "FROM Movie m ");
                
                if (cbbFilter.getSelectedItem().equals("Any")) {
                        String filterQuery = "SELECT * " +
                                            "FROM Movie m ";      
                        rs = stmt.executeQuery(filterQuery);
                }
                else if (cbbFilter.getSelectedItem().equals("Action")) {
                        String filterQuery = "SELECT * " +
                                            "FROM Movie m " +
                                            "WHERE m.movieGenreID = 'Act'";
                        rs = stmt.executeQuery(filterQuery);

                }
                else if (cbbFilter.getSelectedItem().equals("Drama")) {
                        String filterQuery = "SELECT * " +
                                            "FROM Movie m " +
                                            "WHERE m.movieGenreID = 'Dra'";
                        rs = stmt.executeQuery(filterQuery);

                }
                else if (cbbFilter.getSelectedItem().equals("Comedy")) {
                        String filterQuery = "SELECT * " +
                                            "FROM Movie m " +
                                            "WHERE m.movieGenreID = 'Com'";
                        rs = stmt.executeQuery(filterQuery);
                }
                else if (cbbFilter.getSelectedItem().equals("Documentary")) {
                        String filterQuery = "SELECT * " +
                                            "FROM Movie m " +
                                            "WHERE m.movieGenreID = 'Doc'";
                        rs = stmt.executeQuery(filterQuery);
                }
                else if (cbbFilter.getSelectedItem().equals("Sci-fi")) {
                        String filterQuery = "SELECT * " +
                                            "FROM Movie m " +
                                            "WHERE m.movieGenreID = 'ScF'";
                        rs = stmt.executeQuery(filterQuery);
                }
                else if (cbbFilter.getSelectedItem().equals("Thriller")) {
                        String filterQuery = "SELECT * " +
                                            "FROM Movie m " +
                                            "WHERE m.movieGenreID = 'Thr'";
                        rs = stmt.executeQuery(filterQuery);
                }
                
                ResultSetMetaData metaData = rs.getMetaData();
                
                int numberOfColumns = metaData.getColumnCount();
                
                int movieCount = 0;
            
                while (rs.next()) {
                    for (int i = 1; i <= numberOfColumns; i++) {
                        if ((i == 2) || (i == 4)) {
                            movieList[movieCount] = movieList[movieCount] + rs.getObject(i) + "  //  ";
                            
                        }
                        if (i == 5) {
//                            movieList[movieCount] += "\n";
                            movieList[movieCount] = movieList[movieCount] + rs.getObject(i) ;
                            movieCount++;
                        }
                    }
                }
                
                jList1 = new javax.swing.JList<>();

                jList1.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = movieList;
                public int getSize() { return strings.length; }
                public String getElementAt(int i) { return strings[i]; }
            });

            jScrollPane1.setViewportView(jList1);
            }
            catch (SQLException e) {            
            }
        }
    }//GEN-LAST:event_cbbFilterActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jList1ValueChanged

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        if (jList1.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "You have not selected any movie.", "Please select a movie", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        System.out.println(jList1.getSelectedValue());
        
        String[] tokens = jList1.getSelectedValue().split( "  //  " );
        try {
            CJFrame2 f2 = new CJFrame2 (tokens[1], tokens[2], this);
            f2.setVisible(true);
            this.setVisible(false);
        }
        catch (NumberFormatException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jList1MouseClicked

    private void txtQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQueryActionPerformed
        // TODO add your handling code here:
        this.btnRunActionPerformed(evt);
    }//GEN-LAST:event_txtQueryActionPerformed

    public void movieListReset () {
        for (int i = 0; i < 10; i++) {
            movieList[i] = "";
        }
    }

    public static void main(String args[]) {
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CJFrame cinemaSearchBarFrm = new CJFrame();
                cinemaSearchBarFrm.getContentPane().setBackground(new Color (255, 255, 255));
                Image icon = Toolkit.getDefaultToolkit().getImage("src/database.png");   
                cinemaSearchBarFrm.setIconImage(icon);
                cinemaSearchBarFrm.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnRun;
    private javax.swing.JComboBox<String> cbbFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtQuery;
    // End of variables declaration//GEN-END:variables
}
